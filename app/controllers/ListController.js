// Generated by CoffeeScript 1.8.0

/**
@author
@description
@name ListController
 */


/* @ngInject */

(function() {
  module.exports = function($scope) {
    var vm = this;
    $scope.data = {
      group1: 0,
      cb: [false, false ,false, false, false, false,
        false, false ,false, false, false, false,
        false, false ,false, false, false, false,
        false, false ,false, false, false, false, false],
      win: function() {
        var count = 0, i;
        if(this.group1 === 0) {
          for(i=4; i<this.cb.length; i++) {
            if(this.cb[i]) count++;
          }
        } else {
          for(i=0; i<this.cb.length; i++) {
            if(this.cb[i]) count++;
          }
        }
        return count;
      },
      lose: function() {
        return this.group1 === 0 ? this.cb.length-4-this.win() : this.cb.length-this.win();
      },
      rest: function() {
        var results = [];

        var res = vm.checkUpgraded(this.cb, this.group1);
        if(res.state) {
          results.push(res.msg);
        } else {
          var arr = vm.score(this.cb, this.group1);
          for(var i=0; i<arr.length; i++) results.push(arr[i].msg);
        }
        return results;
      }
    };

    // すでに昇級を満たしていないかチェックする。
    this.checkUpgraded = function(data, rank) {
      var res = {}, already = false, msg = '';

      if(rank === 0) {
        data = data.slice(4);
        // 6連勝を含むか
        res = vm.alreadyUpgraded(data, 6, 0);
        if (res.state) {
          already = true;
          msg = res.msg;
        }
        if (!already) {
          // 9勝３敗を含むか
          res = vm.alreadyUpgraded(data, 9, 3);
          if (res.state) {
            already = true;
            msg = res.msg;
          }
        }
        if (!already) {
          // 11勝4敗を含むか
          res = vm.alreadyUpgraded(data, 11, 4);
          if (res.state) {
            already = true;
            msg = res.msg;
          }
        }
        if (!already) {
          // 13勝5敗を含むか
          res = vm.alreadyUpgraded(data, 13, 5);
          if (res.state) {
            already = true;
            msg = res.msg;
          }
        }
        if (!already) {
          // 15勝6敗を含むか
          res = vm.alreadyUpgraded(data, 15, 6);
          if (res.state) {
            already = true;
            msg = res.msg;
          }
        }
      } else {
        // 8連勝を含むか
        res = vm.alreadyUpgraded(data, 8, 0);
        if (res.state) {
          already = true;
          msg = res.msg;
        }
        if (!already) {
          // 12勝4敗を含むか
          res = vm.alreadyUpgraded(data, 12, 4);
          if (res.state) {
            already = true;
            msg = res.msg;
          }
        }
        if (!already) {
          // 14勝5敗を含むか
          res = vm.alreadyUpgraded(data, 14, 5);
          if (res.state) {
            already = true;
            msg = res.msg;
          }
        }
        if (!already) {
          // 16勝6敗を含むか
          res = vm.alreadyUpgraded(data, 16, 6);
          if (res.state) {
            already = true;
            msg = res.msg;
          }
        }
        if (!already) {
          // 18勝7敗を含むか
          res = vm.alreadyUpgraded(data, 18, 7);
          if (res.state) {
            already = true;
            msg = res.msg;
          }
        }
      }
      return {state: already, msg: msg};
    };
    // すでに n勝m敗を含むか
    this.alreadyUpgraded = function(data, win, lose) {
      var already = false;
      for (var i = data.length; i >= (win + lose); i--) {
        var win_count = 0;
        for (var j = 0; j < (win + lose); j++) {
          if (data[i-1-j]) {
            if (win_count < win) win_count++;
            if (win_count === win) {
              already = true;
              break;
            }
          }
        }
        if (already) break;
      }
      return {state: already, msg: (already?(win + '勝'+ lose + '敗以上の戦績があります。'):'') };
    };
    // あと何勝で昇級か計算する
    this.score = function(data, rank) {
      var results = [];
      if (rank === 0) {
        // 6連勝の可能性
        results.push(vm.at_score(data, 6, 0));
        // 9勝３敗の可能性
        results.push(vm.at_score(data, 9, 3));
        // 11勝4敗の可能性
        results.push(vm.at_score(data, 11, 4));
        // 13勝5敗の可能性
        results.push(vm.at_score(data, 13, 5));
        // 15勝6敗の可能性
        results.push(vm.at_score(data, 15, 6));
      } else {
        // 8連勝の可能性
        results.push(vm.at_score(data, 8, 0));
        // 12勝4敗の可能性
        results.push(vm.at_score(data, 12, 4));
        // 14勝5敗の可能性
        results.push(vm.at_score(data, 14, 5));
        // 16勝6敗の可能性
        results.push(vm.at_score(data, 16, 6));
        // 18勝7敗の可能性
        results.push(vm.at_score(data, 18, 7));
      }
      return results;
    };
    // あと何勝何敗で昇級か
    // data: 勝敗データ, win: 昇級に必要な勝数, lose: 昇級に可能な敗数
    this.at_score = function(data, win, lose) {
      var win_count = 0, lose_count = 0, result = {}, found = false;
      for (var i = data.length; i > data.length - (win + lose -1); i--) {
        if (data[i-1]) win_count++;
        else {
          lose_count++;
          // (lose+1)敗目を探し、その直前(data[i])で切る。
          // (win+lose-1) の中で lose しか負けていない場合
          if (lose_count === (lose + 1)) {
            // 末尾の負けは削除する
            var delta = 0;
            for(var j = i; j < data.length; j++) {
              if(!data[j]) delta++;
              else break;
            }
            result = {
              win      : win_count,
              lose     : lose_count - 1 - delta,
              win_rest : win - win_count,
              lose_rest: delta,
              msg: ('現在' + win_count + '勝' + (lose_count - 1 - delta) + '敗中です。残り'+ (win - win_count) +'勝' + delta + '敗以上で昇級です')
            };
            found = true;
            break;
          }
        }
      }
      // (lose+1)敗目が見つからなかった場合は、(win-1)勝 lose敗
      if (!found) {
        // 末尾の負けは削除する
        var delta = 0;
        for(var j = data.length - (win + lose - 1); j < data.length; j++) {
          if(!data[j]) delta++;
          else break;
        }
        result = {
          win      : win_count,
          lose     : lose_count - delta,
          win_rest : 1,
          lose_rest: 0,
          msg: ('現在' + win_count + '勝' + (lose_count - delta) + '敗中です。残り1勝で昇級です')
        }
      }
      return result;
    };
  };
}).call(this);
